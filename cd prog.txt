1a
%{
#include<stdio.h>
int spaces=0,words=0,lines=0,chars=0;
%}

%%
\n {lines++;}
\t {spaces+=4;}
[ ] {spaces++;}
[^ \n\t#] {chars+=yyleng;words++;}
# {return 0;}
%%

int yywrap()
{
    return 1;
}

int main()
{
    printf("Enter : \n");
    yylex();
    printf("%d %d %d %d\n",spaces,words,lines,chars);
}
1b
%{
#include<stdio.h>
%}

%%
"a" {return 'a';}
"b" {return 'b';}
\n {return 0;}
. {return yytext[0];}
%%
%{
    #include<stdio.h>
    extern int yylex();
    int yyerror();
%}

%%
S : A B
  ;
A : 'a' A 'b'
  |
  ;
B : 'b' B 'c'
  |
  ;
%%

int yyerror()
{
    printf("Invalid");
    exit(0);
}

int main()
{
    printf("Enter \n");
    yyparse();
    printf("Valid\n");
    return 0;
}

2a
%{
#include <stdio.h>
#include <stdlib.h>
int posIntCount = 0, negIntCount = 0, posFracCount = 0, negFracCount = 0;
%}

num [0-9]+
posInt \+?{num}
negInt -{num}
posFrac \+?{num}\.{num}?|\+?\.{num}
negFrac -{num}\.{num}?|-\.{num}

%%
{posInt} {posIntCount++;}
{negInt} {negIntCount++;}
{posFrac} {posFracCount++;}
{negFrac} {negFracCount++;}
{posInt}\/{posInt} {posFracCount++;}
{negInt}\/{negInt} {posFracCount++;}
{posFrac}\/{posFrac} {posFracCount++;}
{negFrac}\/{negFrac} {posFracCount++;}
{posFrac}\/{posInt} {posFracCount++;}
{posInt}\/{posFrac} {posFracCount++;}
{negFrac}\/{negInt} {posFracCount++;}
{negInt}\/{negFrac} {posFracCount++;}
{posInt}\/{negInt} {negFracCount++;}
{negInt}\/{posInt} {negFracCount++;}
{posFrac}\/{negFrac} {negFracCount++;}
{negFrac}\/{posFrac} {negFracCount++;}
{posInt}\/{negFrac} {negFracCount++;}
{posFrac}\/{negInt} {negFracCount++;}
{negInt}\/{posFrac} {negFracCount++;}
{negFrac}\/{posInt} {negFracCount++;}
[ \t] ;
[\n] {return 0;}
%%

int yywrap() {
   return 1;
}

int main() {
   printf("Enter the sequence of numbers\n");
   yylex();
   printf("Positive Integer Count = %d\n", posIntCount);
   printf("Negative Integer Count = %d\n", negIntCount);
   printf("Positive Fraction Count = %d\n", posFracCount);
   printf("Negative Fraction Count = %d\n", negFracCount);
   return 0;
}

2b
%{
#include<stdio.h>
#include "y.tab.h"
%}

%%
[0-9]+ {yylval=atoi(yytext); return NUM;}
[-+*/()] {return yytext[0];}
[ \t];
[\n] {return 0;}
%%

%{
    #include<stdio.h>
    extern int yylex();
    int yyerror();
%}

%token NUM 

%%
S : E	{printf("Result = %d\n", $1);}
  ;
  
E : E '+' T	{$$ = $1 + $3;}
  | E '-' T	{$$ = $1 - $3;}
  | T		{$$ = $1;}
  ;

T : T '*' F	{$$ = $1 * $3;}
  | T '/' F	{if ($3 == 0) {printf("Cannot divide by 0\n"); yyerror();} $$ = $1 / $3;}
  | F		{$$ = $1;}
  ;

F : '(' E ')'	{$$ = $2;}
  | '-' F	{$$ = -$2;}
  | NUM	{$$ = $1;}
  ;
%%

int yyerror()
{
    printf("Invalid\n");
    exit(0);
}

int main()
{
    printf("Enter a valid arithmetic expression\n");
    yyparse();
    return 0;
}

3a
%{
#include<stdio.h>
#include<stdlib.h>
extern FILE *yyin, *yyout;
int s=0,m=0;
int flag1=0,flag2=0;
%}

%%
[/][*] {if(flag1==0 && flag2==0){flag1=1;m++;}}
[*][/] {if(flag1==1){flag1=0;}}
[/][/] {if(flag1==0 && flag2==0){flag2=1;s++;}}
\n {if(flag2==1){flag2=0;}}
"$" {return 0;}
. {fprintf(yyout , "%c", yytext[0]);}
%%

int yywrap(){
    return 1;
}

int main()
{

    // printf("Enter : \n");
    yyin = fopen("in.txt","r");
    yyout = fopen("out.txt","w");
    yylex();
    printf("%d %d\n",s,m);
}

3b
%{
#include<stdio.h>
#include<stdlib.h>
#include "y.tab.h"
%}

%%
"if" {return FOR;}
[a-zA-Z][a-zA-Z0-9]* {return IDEN;}
[0-9]+ {return NUM;}
[ \n\t] ;
"$" {return 0;}
. {return yytext[0];}
%%

%{
    #include <stdio.h>
    #include <stdlib.h>
    
    extern int yylex();
    int yyerror();
    
    int count = 0;
%}

%token FOR IDEN NUM

%%
S : I
  ;
I : FOR A B {count++;}
  ;
A : '(' INIT ';' COND ';' UPD ')'
  ;
INIT : IDEN '=' IDEN
     | IDEN '=' NUM
     |
     ;
COND : IDEN REL IDEN
     |
     ;
UPD : '+''+'
    | '-''-'
    |
    ;
REL : '='
    |
    ;
B : B B
  | '{' B '}'
  | I
  |
  ;
%%

int yyerror()
{
    return 1;
}
int main()
{
    printf("Enter \n");
    yyparse();
    printf("%d\n",count);
}

4a

%{
    #include <stdio.h>
    #include <stdlib.h>
    int keyCount = 0, idenCount = 0, opCount = 0;
%}

%%
"int"		{keyCount++; printf("Keyword is %s\n", yytext);}
"float"	{keyCount++; printf("Keyword is %s\n", yytext);}
"char"		{keyCount++; printf("Keyword is %s\n", yytext);}
"double"	{keyCount++; printf("Keyword is %s\n", yytext);}
"void"		{keyCount++; printf("Keyword is %s\n", yytext);}
"bool"		{keyCount++; printf("Keyword is %s\n", yytext);}
"if"		{keyCount++; printf("Keyword is %s\n", yytext);}
"else"		{keyCount++; printf("Keyword is %s\n", yytext);}
"while"	{keyCount++; printf("Keyword is %s\n", yytext);}
"for"		{keyCount++; printf("Keyword is %s\n", yytext);}
"do"		{keyCount++; printf("Keyword is %s\n", yytext);}
[a-zA-Z][a-zA-Z0-9]* {idenCount++; printf("Identifier is %s\n", yytext);}
">="	{opCount++; printf("Operator is %s\n", yytext);}
"<="	{opCount++; printf("Operator is %s\n", yytext);}
"=="	{opCount++; printf("Operator is %s\n", yytext);}
"!="	{opCount++; printf("Operator is %s\n", yytext);}
">"	{opCount++; printf("Operator is %s\n", yytext);}
"<"	{opCount++; printf("Operator is %s\n", yytext);}
"&&" 	{opCount++; printf("Operator is %s\n", yytext);}
"||" 	{opCount++; printf("Operator is %s\n", yytext);}
"!" 	{opCount++; printf("Operator is %s\n", yytext);}
"+"	{opCount++; printf("Operator is %s\n", yytext);}
"-" 	{opCount++; printf("Operator is %s\n", yytext);}
"*" 	{opCount++; printf("Operator is %s\n", yytext);}
"/" 	{opCount++; printf("Operator is %s\n", yytext);}
"%" 	{opCount++; printf("Operator is %s\n", yytext);}
"^" 	{opCount++; printf("Operator is %s\n", yytext);}
"=" 	{opCount++; printf("Operator is %s\n", yytext);}
"#" {return 0;}
. ;
%%

int yywrap()
{
    return 1;
}

int main()
{
    printf("Enter code\n");
    yylex();
    printf("Count of identifiers = %d\n", idenCount);
    printf("Count of keywords = %d\n", keyCount);
    printf("Count of operators = %d\n", opCount);
    return 0;
}

4b
%{
    #include <stdio.h>
    #include <stdlib.h>
    #include "y.tab.h"
%}

%%
"if" {return IF;}
[a-zA-Z][a-zA-Z0-9]* {return IDEN;}
[0-9]+ {return NUM;}
[ \n\t] ;
# {return 0;}
. {return yytext[0];}
%%

int yywrap()
{
    return 1;
}


%{
    #include <stdio.h>
    #include <stdlib.h>
    
    extern int yylex();
    int yyerror();
    
    int count = 0;
%}

%token IF NUM IDEN

%%
S : I
  ;
I : IF A B {count++;}
  ;
A : '(' COND ')'
  ;
COND : IDEN '<' IDEN
     | 
     ;
B : B B
  | '{' B '}'
  | I
  |
  ;
%%

int yyerror()
{
    printf("Invalid\n");
    return 1;
}

int main()
{
    printf("Enter \n");
    yyparse();
    printf("%d\n",count);
}

5
%{
#include<stdio.h>
#include "y.tab.h"   
%}

%%
"int" {return KEY;}
"float" {return KEY;}
"char" {return KEY;}
"double" {return KEY;}
"bool" {return KEY;}
[a-zA-Z][a-zA-Z0-9]* {printf("Identifier is %s\n", yytext); return IDEN;}
[0-9]+ {return NUM;}
[ \n\t] ;
# {return 0;}
. {return yytext[0];}
%%

%{
    #include <stdio.h>
    #include <stdlib.h>
    extern int yylex();
    int yyerror(char*);
    int count = 0;
%}

%token KEY IDEN NUM

%%
S : D ';' S
  |
  ;
D : D ',' I
  | T I
  ;
T : KEY
  ;
I : IDEN {count++;}
  | IDEN C {count++;}
  ;
C : '[' NUM ']' C
  |
  ;
%%

int main()
{
    printf("Enter variable declarations\n");
    yyparse();
    printf("Valid\n");
    printf("Count of identifiers = %d\n", count);
    return 0;
}

int yyerror(char* mesg)
{
    printf("Invalid\n");
    exit(0);
}

6
%{
#include<stdio.h>
#include<stdlib.h>
#include "y.tab.h"
%}


%%
[a-zA-Z_][a-zA_Z_0-9]* {yylval.exp = strdup(yytext); return IDEN;}
[0-9]+ {yylval.exp = strdup(yytext); return NUM;}
[-+*/] {return yytext[0];}
[=()] {return yytext[0];}
"$" {return 0;}
'\n' {return '\n';}
[ \t] ;
. ;
%%


%{
    #include<stdio.h>
    #include<stdlib.h>
    int idx=-1;
    typedef char* string;
    extern FILE* yyin;
    extern int yylex();
    int yyerror();

    struct{
        string op1;
        string op2;
        string res;
        char op;
    }code[100];

    string addToTable(string,string,char);
    void printQuadruples();
    void printTriples();
%}

%union{
    char* exp;
}

%token <exp> IDEN NUM
%type <exp> EXP

%%
STMTS : STMTS STMT
      |
      ;
STMT : EXP '\n'
     ;
EXP : EXP '+' EXP {$$=addToTable($1,$3,'+');}
    | EXP '-' EXP {$$=addToTable($1,$3,'-');}
    | EXP '*' EXP {$$=addToTable($1,$3,'*');}
    | EXP '/' EXP {$$=addToTable($1,$3,'/');}
    | IDEN '=' EXP {$$=addToTable($1,$3,'=');}
    | '(' EXP ')' {$$=$2;}
    | IDEN {$$=$1;}
    | NUM {$$=$1;}
    ;
%%

int yyerror()
{
    // printf("invalid");
    return 1;
}

int main() {
	printf("Enter : \n");
  	yyparse();
  	
  	printf("Three address code\n");
  	printTriples();
  	
  	printf("\nQuadruples\n");
  	printQuadruples();
  	
  	return 0;
}

string addToTable(string op1,string op2,char op)
{
    idx++;
    if(op=='=')
    {
        code[idx].res = op1;
        code[idx].op1=op2;
        code[idx].op = op;
        return op1;
    }
    string res  = malloc(3);
    sprintf(res,"@ %c", idx + 'A');
    code[idx].res = res;
    code[idx].op=op;
    code[idx].op1=op1;
    code[idx].op2=op2;
    return res;
}

void printQuadruples()
{
    for(int i=0;i<=idx;i++)
    {
        if(code[i].op == '=')
        {
            printf("%d %s %s %c\n",i,code[i].res,code[i].op1,code[i].op);
        }
        else
        printf("%d %s %s %s %c\n",i,code[i].res,code[i].op1,code[i].op2,code[i].op);
    }
}

void printTriples()
{
    for(int i=0;i<=idx;i++)
    {
        if(code[i].op == '=')
        {
            printf("%s=%s\n",code[i].res,code[i].op1);
        }
        else
            printf("%s=%s %c %s\n",code[i].res,code[i].op1,code[i].op,code[i].op2);
    }
}

7
%{
    #include <stdio.h>
    #include <stdlib.h>
    #include "y.tab.h"
%}

%%
"int" {return KEY;}
"return" {return RET;}
[a-zA-Z][a-zA-Z0-9]* {return IDEN;}
[0-9]+ {return NUM;}
[ \n\t] ;
"$" {return 0;}
. {return yytext[0];}
%%

%{
    #include <stdio.h>
    #include <stdlib.h>
    
    extern int yylex();
    int yyerror();
%}

%token KEY IDEN RET NUM

%%
S : I
  ;
I : KEY IDEN '(' A ')' '{' B '}'
  ;
A : KEY IDEN ',' A
  | KEY IDEN
  |
  ;
E : IDEN '=' IDEN
  | IDEN '*' IDEN
  ;
B : IDEN '=' E ';'
  | RET E ';'
  | RET NUM ';'
  | 
  ;
%%

int yyerror()
{
    printf("Invalid\n");
    exit(0);
    return 1;
}
int main() {
    printf("Enter the function definition\n");
    yyparse();
    printf("Valid function definition\n");
    return 0;
}

8
%{
    #include <stdio.h>
    #include <stdlib.h>
    #include "y.tab.h"
%}

%%
[a-zA-Z_][a-zA-Z_0-9]* {yylval.exp = strdup(yytext); return IDEN;}
[0-9]+	{yylval.exp = strdup(yytext); return NUM;}
[-+*/]	{return yytext[0];}
[=()]	{return yytext[0];}
[\n]	{return '\n';}
[ \t] ;
# {return 0;}
. ;
%%

%{
    #include <stdio.h>
    #include <stdlib.h>
    
    extern FILE* yyin;
    extern int yylex();
    int yyerror(char*);
    
    typedef char* string;
    
    struct
    {
    	string res;
    	string op1;
    	string op2;
    	char op;
    }code[100];
    
    int idx = -1;
    
    string addToTable(string, string, char);
    void printMachineCode();
%}

%union
{
   char* exp;
}

%token <exp> IDEN NUM
%type <exp> EXP

%left '+' '-'
%left '*' '/'

%%
STMTS : STMTS STMT
      |
      ;

STMT : EXP '\n'
     ;
     
EXP : EXP '+' EXP {$$ = addToTable($1, $3, '+');}
    | EXP '-' EXP {$$ = addToTable($1, $3, '-');}
    | EXP '*' EXP {$$ = addToTable($1, $3, '*');}
    | EXP '/' EXP {$$ = addToTable($1, $3, '/');}
    | IDEN '=' EXP {$$ = addToTable($1, $3, '=');}
    | '(' EXP ')' {$$ = $2;}
    | IDEN {$$ = $1;}
    | NUM {$$ = $1;}
    ;
%%

int yyerror(char* mesg)
{
    printf("Invalid\n");
    exit(0);
}

int main()
{
    yyin = fopen("foo.txt", "r");
    yyparse();
        
    printf("Machine Code\n");
    printMachineCode();
    
    return 0;
}

string addToTable(string op1, string op2, char op)
{
    idx++;
    if (op == '=')
    {
    	code[idx].res = op1;
    	code[idx].op1 = op2;
    	code[idx].op = op;
    	return op1;
    }
    
    string res = malloc(3);
    sprintf(res, "@ %c", idx + 'A');
    code[idx].res = res;
    code[idx].op1 = op1;
    code[idx].op2 = op2;
    code[idx].op = op;
    return res;
}

void printMachineCode() 
{
    for (int i = 0; i <= idx; i++)
    {
    	char op = code[i].op;
    	
    	if(op == '=')
        {
            printf("LD R1,%s\n",code[i].op1);
            printf("ST %s,R1\n",code[i].res);
        }
        else{
            string inst;
            if(op=='+')
            {
                inst="ADD";
            }
            else if(op=='-')
            {
                inst="SUB";
            }
            else if (op == '*')
            inst = "MUL";
            else if (op == '/')
            inst = "DIV";
            printf("LD R1, %s\n",code[i].op1);
            printf("LD R2, %s\n",code[i].op2);
            printf("%s R3,R1,R2\n",inst);
            printf("ST %s,R3\n",code[i].res);
        }
    }
}
